=encoding utf8

=head1 Скаляры

Z<scalars>

X<скаляры>
X<C<$>; сигил>
X<сигилы; C<$>>

Фундаментальный тип данных в Perl 5 - это I<скаляр>, одиночное, дискретное
значение.
Это значение может быть строкой, целым числом, числом с плавающей запятой,
файловым дескриптором или ссылкой--но это всегда одно значение. Скаляры могут
быть лексическими, пакетом или глобальной (L<globals>) переменной. Вы может
определять только лексические переменные или переменные пакета. Имена скалярных
переменных должны соответствовать стандартным указаниям по именованию переменных
(L<names>). Скалярные переменные всегда используют начальный сигил (L<sigils>)
знак доллара (C<$>).

=begin tip Различные Сигилы и Контекст

Скалярное значение и скалярный контекст имеют глубокую связь; присваивание
скаляру формирует скалярный контекст. Применяя сигил скаляра к составной
переменной налагает скалярный контекст для доступа к единственному элементу
хэша или массива.

=end tip

=head2 Скаляры и Типы

Скалярная переменная может содержать любой тип скалярных значений без
специальной конвертации или преобразований, и тип значения сохранённого в
переменной может меняться:

=begin programlisting

    my $value;
    $value = 123.456;
    $value = 77;
    $value = "Я большой палец ноги Чака.";
    $value = Store::IceCream->new();

=end programlisting

Несмотря на то, что код вполне I<законный>, изменение типа данных сохраняемых в
скаляре - это источник недоразумений.

Эта гибкость типов часто приводит к интерполяции значения (L<coercion>).
Например, вы можете рассматривать содержимое скаляра как строку, даже если вы
явно не присвоили ей строковое значение:

=begin programlisting

    my $zip_code       = 167000;
    my $city_state_zip = 'Сыктывкар, Республика Коми' . ' ' . $zip_code;

=end programlisting

Вы также можете использовать математические операции на строках:

=begin programlisting

    my $call_sign = 'KBMIU';

    # обновить знак и вернуть новое значение
    my $next_sign = ++$call_sign;

    # вернуть старое значение, I<затем> обновить знак
    my $curr_sign = $call_sign++;

    # но так I<не сработает>:
    my $new_sign  = $call_sign + 1;

=end programlisting

X<инкремент; строка>

=begin tip Магия Одностороннего Инкремента

Этот магический приём инкремента строки не имеет соответствующего приёма
магического декремента. Вы не сможете получить предыдущую строку записав
C<$call_sign-->.

=end tip

Операция инкремента строки превращает C<a> в C<b> и C<z> в C<aa>, учитывая
регистр и тип символа. Так C<ZZ9> становится C<AAA0>, C<ZZ09> становится
C<ZZ10>--числа поворачиваются, пока есть возможность увеличения, как на
спидометре автомобиля.

X<строкофикация>
X<числофикация>

Вычисление ссылки (L<references>) в строковом контексте производит строку.
Вычисление ссылки в числовом контексте производит число. Ни одна из этих
операций не модифицирует ссылку, но Вы не сможете воссоздать ссылку из этого
результата:

=begin programlisting

    my $authors     = [qw( Pratchett Vinge Conway )];
    my $stringy_ref = '' . $authors;
    my $numeric_ref =  0 + $authors;

=end programlisting

C<$authors> по-прежнему полезная ссылка, но C<$stringy_ref> это строка без
какой-либо связи с ссылкой и C<$numeric_ref> - это число без связи со ссылкой.

X<C<Scalar::Util>>
X<двуликие переменные>
X<C<dualvar()>>

Чтобы разрешить преобразования без потери данных, скаляры Perl 5 могут
содержать оба компонента: строковой и числовой. Внутренняя структура данных,
которая представляет скаляр в Perl 5 имеет числовой слот и строковой слот.
Доступ к к строке в числовом контексте создаёт скаляр с обоими строковым и
числовым значениями. Функция C<dualvar()> в базовом модуле C<Scalar::Util>
позволяет вам манипулировать с обоими значениями напрямую в рамках одного
скаляра.

X<булев тип>
X<скаляры; логические значения>
X<булев тип; истина>
X<булев тип; ложь>
X<строки; истина>
X<строки; ложь>
X<числа; истина>
X<числа; ложь>

Скаляры не содержат отдельного слота для логических значений. В логическом
контексте пустая строка (C<''>) и C<'0'> являются ложью. Все другие строки
являются истиной. В логическом контексте числа, вычисляемые в ноль (C<0>,
C<0.0>, и C<0e0>) являются ложью. Все другие числа - истиной.

=begin tip Что есть Правда?

Будьте осторожны, I<строки> C<'0.0'> и C<'0e0'> являются истиной; это
единственное место, где Perl 5 отмечает различие между тем, что похоже на число,
и что действительно является числом.

=end tip

X<C<undef>>

Ещё одно значение всегда ложно: C<undef>. Это значение неинициализированной
переменной, так и значение само по себе.
